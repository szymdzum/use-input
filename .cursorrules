{
"version": "1.0",
"compulsory": "Review and adhere to the rules in this file before making any modifications to the codebase. This file serves as the central source of truth for project standards and guidelines. Ignoring these rules can lead to inconsistencies, accessibility issues, and technical debt.",
"coreTechnologiesSetup":
{
"JavaScriptRuntime": "PNPM is REQUIRED for package management. Use 'pnpm install' to install dependencies.",
"TypeScript": "Ensure type-safe code and strict type checking. Refer to tsconfig.json for recommended settings.",
"Biome": "Enforces linting, formatting, and advanced code rules. Run 'pnpm biome check --write' to lint and auto-fix code.",
"Prettier": "Integrated into Biome for consistent code formatting.",
},
"compulsoryDevelopmentNotes":
{
"coreTechnologies": ["React 19 (with hooks)", "TypeScript", "PNPM"],
"lintingFormattingRules": ["Biome", "Prettier configurations"],
"reactBestPractices": ["typed hooks", "context", "generics"],
"stylingApproach": {
"preferred": "CSS Modules",
"rationale": "Preferred for better encapsulation and maintainability over Tailwind CSS",
"location": "Component-specific .module.css files alongside their components"
}
},
"mandatoryLintingRules":
{
"BiomeConfiguration":
[
"Enforce return-await in async functions",
"Ensure noImplicitAny and other strict TypeScript settings",
"Format code with Prettier automatically",
],
"runCommand": "pnpm biome check --write",
},
"testingRequirements":
{ "passTestsBeforeMerging": true, "command": "pnpm test" },
"repositoryEntryPointRules": "Always start from here",
"on_init":
{
"step": ["rules", "reminders and reasons"],
"action": "check .cursorrules and docs/ before each modification",
},
"documentation":
{
"required_reference":
{
"path": "./docs",
"files":
[
"project-overview.md",
"planning/step-by-step-plan.md",
"guidelines/development-guidelines.md",
"changelog/changelog.md",
],
},
},
"workflow":
{
"approach": "iterative",
"steps":
[
"understand_requirements",
"consult_documentation",
"implement_basic_solution",
"refine_iteratively",
"validate_accessibility",
"update_changelog",
],
},
"componentStructure":
{
"structure": "atomic",
"naming": { "pattern": "PascalCase", "examples": ["PasswordField"] },
},
}
